from scipy.integrate import odeint
import numpy as np
import matplotlib
matplotlib.use('agg')	#run without an X-server
import matplotlib.pyplot as plt
from timeit import default_timer as timer
import pandas as pd
import sys
import os
import pickle
from tqdm import tqdm
sys.dont_write_bytecode = True

folder = os.path.dirname(os.path.abspath(__file__)) + '/'

t = np.linspace(0, {{model['horizon']}}, {{model['eval_points']}})
points = len(t)
solver_steps = 0
states = {{model['states']}}

x = dict()
dt_x = dict()

sorted_keys = {{model['sorted_keys']}}
init = {{model['initial_distribution']}}
centroid_vectors = {{model['centroid_vectors']}}
beta_weight = {{model['beta_weight']}}

def compute_beta(s,s1,s2):
	rate_sum = 0.0
	edge_count = 0.0
	s_i = states.index(s)

	for i, key in enumerate(sorted_keys):
		if key[0] != s1:
			continue
		centroid_vector = centroid_vectors[i]
		s_neighbor_count = centroid_vector[s_i]
		if s_neighbor_count == 0:
			continue
		rate_agg = beta_weight[(key[1], s, s1, s2)]
		rate_sum += rate_agg*x[key]
		edge_count += s_neighbor_count*x[key]

	final_rate = rate_sum/edge_count
	return final_rate

def f(x_flat, t):
	global solver_steps, x, dt_x
	solver_steps += 1
	x_flat[x_flat<=0.0] = 10**(-30)
	dt_x_flat = np.zeros(len(x_flat), dtype=np.double)
	for i in range(len(x_flat)):
		x[sorted_keys[i]] = x_flat[i]
{{model['ode_text']}}
	for i in range(len(x_flat)):
		dt_x_flat[i]=dt_x[sorted_keys[i]]
	return dt_x_flat

#def odeint_adams(f, init, time_points, integrator = 'lsoda'):
def odeint_adams(f, init, time_points, integrator = 'vode'):  # use vode for a rougher estimate
	def f_ode(t, u):
		return f(u,t)

	from scipy.integrate import ode
	#r = ode(f_ode).set_integrator(integrator,rtol=1e-4, atol=1e-5, with_jacobian=False, method='adams') # use this for a rougher estimate
	r = ode(f_ode).set_integrator(integrator, with_jacobian=False, method='adams')
	r.set_initial_value(init, 0)
	step = 0
	u = []
	t = []
	if time_points[0] == 0.0:
			time_points = time_points[1:]
			u.append(np.array(init))
	T = len(time_points)
	pbar = tqdm(total=T)
	pbar.set_description('ODE progress')
	while r.successful() and step < T:
			r.integrate(time_points[step])
			step += 1
			pbar.update(1)
			u.append(r.y)
			t.append(r.t)
	u = np.array(u)
	pbar.close()
	return u


def solve_odes(write_csv = True):
	try:
		raise ValueError('dont') #fix nameing first
		(sol, time_elapsed) = pickle.load(open(folder+'{{model['fullname']}}_sol.p', 'rb'))
		print('Found pickled results.')
		return sol, time_elapsed
	except:
		pass

	global init
	start = timer()
	init = np.array(init, dtype = np.double)
	#sol = odeint(f, init, t)
	sol = odeint_adams(f, init, t)
	end = timer()
	time_elapsed = end - start
	if write_csv:
		ode_ids = [str(ode) for ode in sorted_keys]
		np.savetxt(folder+'{{model['fullname']}}_trajectories_individual.csv', sol, delimiter=';', header='sep=;\n'+';'.join(ode_ids), comments='')

	pickle.dump((sol, time_elapsed), open(folder+'{{model['fullname']}}_sol.p', "wb" ) )
	return sol, time_elapsed


def plot():

	sol, time_elapsed = solve_odes()

	import seaborn as sns 
	plt.clf()

	results = dict()
	for s in states: results[s] = list()
	for i, system_state in enumerate(sol):
		for key in results:
			results[key].append(0.0)
		for ode_i, ode_value in enumerate(system_state):
			state = sorted_keys[ode_i][0]
			results[state][-1] += ode_value

	cp = sns.color_palette("Set1")
	sns.set_context('paper', font_scale = 2.3, rc={"lines.linewidth": 5, 'xtick.labelsize':20, 'ytick.labelsize':20})
	sns.set_style('white')
	ax = plt.gca()
	cp[0], cp[2] = cp[2], cp[0] # to give SIR model intuitive color

	for i, (state, values) in enumerate(sorted(results.items(), key = lambda x: x[0])):
		ax.plot(t, values, label=state, linewidth = 4, color=cp[i])

	ax.set_xlim([0.0,{{model['horizon']}}])
	ax.set_ylim([0.0,1.0])

	sns.despine()
	ax.set(xlabel='Time', ylabel='Fractions')
	plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0., title='States') # put legend outside
	plt.tight_layout()
	plt.savefig(folder+'{{model['fullname']}}_trajectories.pdf', bbox_inches="tight")

	with open(folder+'{{model['fullname']}}_trajectories.csv', 'w') as f:
		sep=','
		f.write('sep=,\n')
		f.write('time'+sep+sep.join(states)+'\n')
		for i in range(len(results[states[0]])):
			f.write(str(t[i])+sep)
			for state in states:
				s = sep if state != states[-1] else ''
				f.write(str(results[state][i])+s)
			if i != range(len(results[states[0]]))[-1]:
				f.write('\n')

	return results, t, time_elapsed


if __name__ == '__main__':
	plot()
